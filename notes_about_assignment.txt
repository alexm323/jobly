Step 1 :
partialSQL Update helper function 

Looked at the partial sql update function and it takes two parameters. 
The point of the helper function is to make it possible to update the SQL according only to the fields you want to update 

The way it does that is by taking the first parameter which is the data itself that is to be updated. This comes in the form of an object that has the names of the fields you would like to update. The second parameter makes sure that the column name is in sql format by checking if a column in the keys from the dataToUpdate Object exists , if it does then the format is correct, if it doesn't then we just use the column name we are mapping from the keys. It also keeps track of the index number for when we pass them into sql as $1, $2, etc. 

we return: 
the new columns array is combined as a string so we can use it in our SQL statement as the SET clause 

the values, which are just an array of the values passed into the function as the dataToUpdate argument. 

In practice: 
This function is used in the update features in the models. We can see this in the company and user models in the update static methods

in the update method specifically we pass in the data that we want and the function will return to us the proper format for our sql query. 
The handleVarIdx and querySql are particularly interesting 

In order to account for any number of the variable we want to update, with use of the spread operator it makes it possible to make sure we are getting the right company by handle and accounting for any of the values that it is accepting as an array of parameters by taking the length of the params array and adding 1 to put as the index of the handle. I never would have thought of that and it is pretty clever 


Testing:
As long as we get the right format back from the function, it should be easy enough to test for. And we can also test for not having any parameters which should throw an error. We can use the expect ... toThrow matcher

Step 2: Adding filtering

We want to add in a feature that allows us to get different results from the api if we include a specific querystring. we want the following functionality 

name: filter a company by name, should be case insensitive 
minEmployees: filter companies that have at least this number of employees 
maxEmployees: filter companies that have at most this number of employees 

note: Throw an error if the minEmployees param is greater than the maxEmployees param. Respond with a 400 error and an appropriate message

it is going to be a few changes to the route and the model as well
the route is where i get the actual query string so I can expect an object from the query string and based on what values are positive if i am checking for 3 like name,min, and max then I will be able to grab that as well as the value from that key which should be there with an equal sign like /companies?name=facebook. 

the actual filtering should be done on the model. I can make a generic filter function that accepts an object that has the keys of name,min,max. I can check for truthiness in the values and then alter a SQL query accordingly 

added the basic condition that minimum employees should be less than maximum number of employees and added in a test for it.

Finished the filtering query for the sql and added in tests to check for each condition as well as with a combination of filters. everything is passing so moving on to the next section 


Step 3: 
Requirements 
1. Do not change the code to the routes 
2. Do not SELECT information about the user on every request
3. Authentication credentials provided by the user can contain the information the user needs to provide proof of meeting the requirements 

First task: Make sure that only admin users can create a company if they are flagged in the database as admins 

First I am checking how to create a user to make sure that a regular user can not create companies without admin priveliges

TOOK ME WAY TOO LONG TO FIGURE OUT HOW AUTHENTICATE JWT WAS ACTUALLY WORKING , it was being used in the app , app.use was initializing it before every fucntion automatically, makes so much more sense now 

so up to this point I had only seen where we send the token as part of the JSON so I was confused because here they sent it as part of the header. so we grab the token out of the header and not the json body 

so now that i actually understand how the login is working I can tackle the actual problem which is ensuring that only an admin can have certain functionality 

to do that we need to write an ensureAdmin functionality 

first we need to access the data from the payload which we can see on jwt.io but we can see the payload data if we access res.local.user and we can access the isAdmin property from here 

created two new middleware functions to assist with the privileges on certain routes, ensureAdmin, and ensureUserOrAdmin as was recommended by a TA because I had an initial ideal of an OR operator in the middleware not seeing the easier solution of just having a seperate middleware function that checks for both cases of being the right user or being an admin 

time to write some tests for it 

using a new matcher called expect assertions(num) that counts how many times a certain function is being run which is good for async code and middle ware. since if we are calling like 3 routes we want to make sure if ensureLoggedIn is supposed to run for each route that we are calling it each time 

I had some trouble with the last of the tests and I got really frustrated with the whole thing >_>

now i have to implement it on the routes they are required which I believe are as follows:

ADMIN ONLY:
companies/ 
{
    creating
    updating
    deleting
}

this was a pretty easy fix 
added ensureAdmin to each of the routes that required login in the companies routes

to update the tests 
just had to use u3 token which I defined in the _testCommon and gave it admin privileges and replace every isntanct of u1Token in the companies.test.js file 


users/
{
    creating users ADMIN
    getting list of users ADMIN

    THAT_USER/ADMIN
    getting a single user details
    updating
    deleting

}

Step 4:
We are getting closer to the end 

Need to add in a model for jobs that we are going to pattern match from the companies model 

Create a model 
Write tests for the model 
add routes for the jobes 
anyone can get the jobs but only admins have the ability to update/create/delete jobs 
need to add in a json schema to validate the information 

add in filtering 
this would be a good time to create that filterQueryBuilder helper function

need to go back to the /companies/handle to make it so that the job information appears for the jobs that are associated with that company 

first thing to do is to look at the schema for the database table and probably right out the jsonschema for it 

jobs have the following data 
id
title 
salary
equity
company_handle which is referencing the companies table 

the nice thing is there is already a ton of jobs seeded into the database 

They are using NUMERIC field type for the equity section and typically that type is reserved for monetary amount and places where precision matters. The numeric field type can be given a scale and a precision value where you can indicate what numbers place to round to, tenths thousandths etc . PG will throw an error if the precision of a number is surpassed

And apparently we get a string back when making a query of a Numeric column, the reason being that number precision is maxed at 32 bit. So the only way to get exact precision is to use a string to hold that data 


Looking at the schemas that are already in , it looks like it is broken up in two for each kind of table in the database 
ie one for creating a new company and one for updating a company 


const companyNewSchema = require("../schemas/companyNew.json");
const companyUpdateSchema = require("../schemas/companyUpdate.json");


they have this in the companies file which is importing both of the types of schemas so i envision something similar 

using this example to make a json schema 

{
    "id": 1,
    "title": "Information Officer",
    "salary": 200000,
    "equity": 0,
    "company_handle": "watson-davis"
}

got this from the seed data and am using it to construct my schema 

made an initial schema now I want to try to make the Job Model 

made a Job class and I am using a static function for create like in the companies 

just to make sure I am creating a job correctly testing it out in psql first 

jobly=# INSERT INTO jobs (title, salary, equity, company_handle )VALUES ('gamer', 1000, 0, 'mspace') RETURNING id, title
, salary, company_handle AS "companyHandle";
 id  | title | salary | companyHandle
-----+-------+--------+---------------
 202 | gamer |   1000 | mspace
(1 row)

INSERT 0 1

so it seems to work straight with the database so now let me make a quick route and try that 

so got the basic create route to work but now I need to add validation and ensure admin before moving on from this route as well as writing more tests of course 

check if it passes my validation check that I just added with the JSON schema

was having trouble with the company handle and the variable naming, i don't really understand why the convention goes all over the place in terms of the naming 

ok got the json schema validated route now we need to add in authentication 

added in the middleware and tried to create and it rejected which is good, thats what i want without an auth token

so the route works with auth so now I can write some tests for this route 

got the tests working for creating as an admin 

need to make another model method for getting info 

making the findAll function and route right now and I am working on the filters right away because I might as well take care of it now 
got two of the fitlers down but I am having trouble thinking of how to deal with the has equity i want to evaluate the value for each one so i can filter if the equity value is greater than zero 

GOT THE FILTERS WORKING. I will write the tests tomorrow. I am tired. 
next up write the tests and add in the ensureAdmin middleware for it 

tried it with ensure admin and it gave me unauthorized as expected 

time to write some tests for the filter function and the route 

I am having an issue with the creation of my jobs for testing where I am getting back an empty array when I use Job.findAll(). it is returning an empty array instead of an array with the job objects inside of them like I thought would be happening

maybe monday I can have somebody explain it to me 
  await Job.create({
    title: "j1",
    salary: 10000,
    equity: 0,
    companyHandle: 'c1'
  });
  await Job.create({
    title: "j1a",
    salary: 100000,
    equity: 0.01,
    companyHandle: 'c1'
  });
  await Job.create({
    title: "j2",
    salary: 20000,
    equity: 0.02,
    companyHandle: 'c2'
  });
  await Job.create({
    title: "j3",
    salary: 30000,
    equity: 0.03,
    companyHandle: 'c3'
  });

const queries = await db.query(`SELECT * FROM jobs;`)
  console.log(queries)

  when i do this it returns me jobs so I don't really understand why I am getting an empty array back 

or maybe it is just my findAll function that is broken 

PITFALLS TO AVOID, I FINALLY GOT IT WORKING BUT MY GOD I WAS DESCENDING INTO MADNESS TRYING TO FIGURE IT OUT AND I WAS IN THE WRONG DAMN FILE THE WHOLE FUCKING TIME 

FUUUUUUCK


ok got the find all tests working , a lot easier once you actually have your data in the right files it turns out -_-


time to continue with the model and add in the update feature 

have the update method in the model now I need to go back to make a schema


ok added the schema and finally finished out the job functionality with some tests on the job model have some edge cases I need to deal with like when we try to delete a non existent company 

need to update one of the routes on companies and need to test the jobs routes to make sure they are working 


WRITING TESTS IS KILLING ME SLOWLY. anyways, tomorrow continue with the jobs tests and then finish the section 5 and turn this fucking monster assignmnent in and move on to react and read the Dada code base. 

